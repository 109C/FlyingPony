"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _regeneratorRuntime = require("babel-runtime/regenerator")["default"];

var _Promise = require("babel-runtime/core-js/promise")["default"];

var Vec3 = require("vec3");

function columnKeyXZ(chunkX, chunkZ) {
  return chunkX + ',' + chunkZ;
}

function posInChunk(pos) {
  return pos.floored().modulus(new Vec3(16, 256, 16));
}

var World = (function () {
  function World(chunkGenerator) {
    _classCallCheck(this, World);

    this.columns = {};
    this.columnsArray = [];
    this.chunkGenerator = chunkGenerator;
  }

  _createClass(World, [{
    key: "getColumn",
    value: function getColumn(chunkX, chunkZ) {
      var key;
      return _regeneratorRuntime.async(function getColumn$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_Promise.resolve());

          case 2:
            key = columnKeyXZ(chunkX, chunkZ);

            if (!(!this.columns[key] && this.chunkGenerator)) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.setColumn(chunkX, chunkZ, this.chunkGenerator(chunkX, chunkZ)));

          case 6:
            return context$2$0.abrupt("return", this.columns[key]);

          case 7:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "setColumn",
    value: function setColumn(chunkX, chunkZ, chunk) {
      var key;
      return _regeneratorRuntime.async(function setColumn$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_Promise.resolve());

          case 2:
            key = columnKeyXZ(chunkX, chunkZ);

            this.columnsArray.push({ chunkX: chunkX, chunkZ: chunkZ, column: chunk });
            this.columns[key] = chunk;

          case 5:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "getColumns",
    value: function getColumns() {
      return this.columnsArray;
    }
  }, {
    key: "getColumnAt",
    value: function getColumnAt(pos) {
      var chunkX, chunkZ;
      return _regeneratorRuntime.async(function getColumnAt$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            chunkX = Math.floor(pos.x / 16);
            chunkZ = Math.floor(pos.z / 16);
            return context$2$0.abrupt("return", this.getColumn(chunkX, chunkZ));

          case 3:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "setBlock",
    value: function setBlock(pos, block) {
      return _regeneratorRuntime.async(function setBlock$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            context$2$0.t1 = block;
            context$2$0.sent.setBlock(context$2$0.t0, context$2$0.t1);

          case 5:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "getBlock",
    value: function getBlock(pos) {
      return _regeneratorRuntime.async(function getBlock$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            return context$2$0.abrupt("return", context$2$0.sent.getBlock(context$2$0.t0));

          case 4:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "getBlockType",
    value: function getBlockType(pos) {
      return _regeneratorRuntime.async(function getBlockType$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            return context$2$0.abrupt("return", context$2$0.sent.getBlockType(context$2$0.t0));

          case 4:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "getBlockData",
    value: function getBlockData(pos) {
      return _regeneratorRuntime.async(function getBlockData$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            return context$2$0.abrupt("return", context$2$0.sent.getBlockType(context$2$0.t0));

          case 4:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "getBlockLight",
    value: function getBlockLight(pos) {
      return _regeneratorRuntime.async(function getBlockLight$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            return context$2$0.abrupt("return", context$2$0.sent.getBlockLight(context$2$0.t0));

          case 4:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "getSkyLight",
    value: function getSkyLight(pos) {
      return _regeneratorRuntime.async(function getSkyLight$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            return context$2$0.abrupt("return", context$2$0.sent.getSkyLight(context$2$0.t0));

          case 4:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "getBiome",
    value: function getBiome(pos) {
      return _regeneratorRuntime.async(function getBiome$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            return context$2$0.abrupt("return", context$2$0.sent.getBiome(context$2$0.t0));

          case 4:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "setBlockType",
    value: function setBlockType(pos, blockType) {
      return _regeneratorRuntime.async(function setBlockType$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            context$2$0.t1 = blockType;
            context$2$0.sent.setBlockType(context$2$0.t0, context$2$0.t1);

          case 5:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "setBlockData",
    value: function setBlockData(pos, data) {
      return _regeneratorRuntime.async(function setBlockData$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            context$2$0.t1 = data;
            context$2$0.sent.setBlockData(context$2$0.t0, context$2$0.t1);

          case 5:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "setBlockLight",
    value: function setBlockLight(pos, light) {
      return _regeneratorRuntime.async(function setBlockLight$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            context$2$0.t1 = light;
            context$2$0.sent.setBlockLight(context$2$0.t0, context$2$0.t1);

          case 5:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "setSkyLight",
    value: function setSkyLight(pos, light) {
      return _regeneratorRuntime.async(function setSkyLight$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            context$2$0.t1 = light;
            context$2$0.sent.setSkyLight(context$2$0.t0, context$2$0.t1);

          case 5:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: "setBiome",
    value: function setBiome(pos, biome) {
      return _regeneratorRuntime.async(function setBiome$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getColumnAt(pos));

          case 2:
            context$2$0.t0 = posInChunk(pos);
            context$2$0.t1 = biome;
            context$2$0.sent.setBiome(context$2$0.t0, context$2$0.t1);

          case 5:
          case "end":
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return World;
})();

module.exports = World;